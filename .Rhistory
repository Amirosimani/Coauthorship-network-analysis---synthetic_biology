Dem = fread(file.choose() ,header=TRUE)
Dia = fread(file.choose() ,header=TRUE)
Dem$race[Dem$race == 'Hispanic-HISPANIC'] = 'Hispanic'
Dem$race[Dem$race == 'White-WHITE'] = 'White'
Dem$race[Dem$race == 'American Indian-AMERICAN INDIAN'] = 'American Indian'
Dem$race[Dem$race == 'Asian-ASIAN'] = 'Asian'
Dem$race[Dem$race == 'BLACK OR AFRICAN AMERICAN'] = 'African American'
Dem$race[Dem$race == 'Black-BLACK'] = 'Black'
#Data conversion
Dem$date_of_birth = as.Date(Dem$date_of_birth)
Dem$date_of_death = as.Date(Dem$date_of_death)
Dia$dia_date = as.Date(Dia$dia_date)
### 3. Basic stats and plots----
options(digits=3)
race_gender <- dcast( Dem , race ~ gender , length )
race_gender$total <- race_gender$female + race_gender$male
race_gender <- race_gender[order(-race_gender$total),]
race_gender$age_average <- c(69.6,70.8,60.6,72.2,72.4,65.2)
race_gender$age_sd <- c(22.3,20.1,21.0,20.5,21.4,22.5)
row.names(race_gender) <- NULL
new_row <- c("All races",200,200,400,69.4,21.8)
race_gender <- rbind(new_row, race_gender)
#race and gender table
grid.table(race_gender, rows=NULL)
"tableau for bubble chart"
positions <- c("White", "Black", "Asian", "African American", "Hispanic","American Indian")
ggplot(Dem, aes(race, fill=gender)) + scale_x_discrete(limits = positions) +
geom_bar() +
ggtitle("Breakdown of patients based on Race and Gender")
geom_text(aes(label = count, y = pos), size = 3) + geom_text()
ggplot(Dem, aes(race, age)) + geom_boxplot(fill = "grey80", colour = "#3366FF") +
ggtitle("Patients average Age based on Race")
ggplot(Dem, aes(race, age, fill = gender)) + geom_boxplot() +
ggtitle("Patients age based on race and gender")
ggplot() +
geom_freqpoly(data = Dem, aes(age), binwidth = 5, size = 1.5) +
geom_freqpoly(data = Dem, aes(age, fill = race, colour = race),binwidth = 5, size = 1) + xlim(20, 100) +
ggtitle("Age distribution based on Race") +
geom_vline(xintercept=37, size = 0.3, color ="grey") + geom_vline(xintercept=58, size = 0.3, color ="grey")
ggplot() +
geom_freqpoly(data = Dem, aes(age), binwidth = 5, size = 1.5) +
geom_freqpoly(data = Dem, aes(age, fill = gender, colour = gender), binwidth = 5, size = 1) +
xlim(20, 100) + scale_fill_brewer() +
ggtitle("Age distribution based on Gender") +
geom_vline(xintercept=37, size = 0.3, color ="grey") + geom_vline(xintercept=58, size = 0.3, color ="grey")
aggregate(age~gender, Dem, function(x) c(mean = mean(x), sd = sd(x)))
ggplot(Dem, aes(gender, age)) + geom_boxplot(fill = "grey80", colour = "#3366FF")+
ggtitle("Patients average age based on Gender")
jpg("1.jpg")
bmp("1.bmp")
ggplot() +
geom_freqpoly(data = Dem, aes(age), binwidth = 5, size = 1.5) +
geom_freqpoly(data = Dem, aes(age, fill = race, colour = race),binwidth = 5, size = 1) + xlim(20, 100) +
ggtitle("Age distribution based on Race") +
geom_vline(xintercept=37, size = 0.3, color ="grey") + geom_vline(xintercept=58, size = 0.3, color ="grey")
dev.off()
bmp("2.bmp")
ggplot() +
geom_freqpoly(data = Dem, aes(age), binwidth = 5, size = 1.5) +
geom_freqpoly(data = Dem, aes(age, fill = gender, colour = gender), binwidth = 5, size = 1) +
xlim(20, 100) + scale_fill_brewer() +
ggtitle("Age distribution based on Gender") +
geom_vline(xintercept=37, size = 0.3, color ="grey") + geom_vline(xintercept=58, size = 0.3, color ="grey")
dev.off()
white <- Dem[ which(Dem$race =='White')]
#visualizing age of patients only for whites
"both female and male patients have an increase after "
ggplot() +
geom_freqpoly(data = white, aes(age), binwidth = 5, size = 2) +
geom_freqpoly(data = white, aes(age, fill = gender, colour = gender),binwidth = 5, size = 1) +
xlim(20, 100) + scale_fill_brewer() +
ggtitle("White patients' age based on gender") +
geom_vline(xintercept=37, size = 0.3, color ="grey") + geom_vline(xintercept=47, size = 0.3, color ="grey")
bmp("3.bmp")
ggplot() +
geom_freqpoly(data = white, aes(age), binwidth = 5, size = 2) +
geom_freqpoly(data = white, aes(age, fill = gender, colour = gender),binwidth = 5, size = 1) +
xlim(20, 100) + scale_fill_brewer() +
ggtitle("White patients' age based on gender") +
geom_vline(xintercept=37, size = 0.3, color ="grey") + geom_vline(xintercept=47, size = 0.3, color ="grey")
dev.off()
bmp("3.bmp")
ggplot() +
geom_freqpoly(data = white, aes(age), binwidth = 5, size = 2) +
geom_freqpoly(data = white, aes(age, fill = gender, colour = gender),binwidth = 5, size = 1) +
xlim(20, 100) + scale_fill_brewer() +
ggtitle("White patients' age based on gender") +
geom_vline(xintercept=37, size = 1, color ="grey") + geom_vline(xintercept=47, size = 0.3, color ="grey")
dev.off()
bmp("3.bmp")
ggplot() +
geom_freqpoly(data = white, aes(age), binwidth = 5, size = 2) +
geom_freqpoly(data = white, aes(age, fill = gender, colour = gender),binwidth = 5, size = 1) +
xlim(20, 100) + scale_fill_brewer() +
ggtitle("White patients' age based on gender") +
geom_vline(xintercept=37, size = 1, color ="grey") + geom_vline(xintercept=47, size = 1, color ="grey")
dev.off()
N = 3
people <- read.csv('/Users/Amiros/GitHub/MWH/people.csv', sep = ",")
people$X <- NULL
people$from <- as.character(people$from)
people <- as.data.frame(sapply(people, function(x) gsub("UNCLASSIFIEDUSDepartmentofStateCaseNoFDocNoC", "", x)))
from <- as.data.frame(sort(table(people$from), decreasing = TRUE))
from <- setDT(from, keep.rownames = T)[]
library(data.table)
from <- as.data.frame(sort(table(people$from), decreasing = TRUE))
from <- setDT(from, keep.rownames = T)[]
top100 <- from[1:100,]
selected <- people[people$from %in% top100$rn,]
library(plyr)
cdata <- ddply(selected, c("from", "to"), summarise)
cdata <- ddply(selected, c("from", "to"), summarise,   N = length(from))
View(cdata)
a <- setDT(tstrsplit(as.character(selected$to), ";", fixed=TRUE))[]
mat_sel <- cbind(selected$from, a,b)
mat_sel <- cbind(selected$from, a)
colnames(mat_sel)[1] <- "from"
View(mat_sel)
mat_sel <- subset(mat_sel, V1 = NULL | from = NULL)
mat_sel <- subset(mat_sel, V1 == NULL | from == NULL)
mat_sel <- cbind(selected$from, a)
mat_sel <- subset(mat_sel, V1 == NULL)
mat_sel <- cbind(selected$from, a)
mat_sel <- subset(mat_sel, V1 == NA )
mat_sel <- cbind(selected$from, a)
mat_sel <- subset(mat_sel, V1 == "NA" )
mat_sel <- cbind(selected$from, a)
colnames(mat_sel)[1] <- "from"
mat_sel <- mat_sel[ V1 != 'NA']
View(mat_sel)
mat_sel <- mat_sel[ V1 != 'NA' | from != 'NA']
mat_sel <- mat_sel[ V1 != 'NA' | from != '']
View(mat_sel)
mat_sel <- mat_sel[ V1 != 'NA' | from != '' | nchar(V1) < 15]
mat_sel <- mat_sel[ from != '']
mat_sel <- mat_sel[ nchar(V1) < 15 ]
View(mat_sel)
mat_sel <- cbind(selected$from, a)
colnames(mat_sel)[1] <- "from"
mat_sel <- mat_sel[ V1 != 'NA' & from != '' & nchar(V1) < 15]
a[, list(V1, V2, V3, V4, V5)]
a <- a[, list(V1, V2, V3, V4, V5)]
View(a)
mat_sel <- cbind(selected$from, a)
colnames(mat_sel)[1] <- "from"
mat_sel <- mat_sel[ V1 != 'NA' & from != '' & nchar(V1) < 15]
View(mat_sel)
View(from)
View(selected)
people <- read.csv('/Users/Amiros/GitHub/MWH/people.csv', sep = ",")
people$X <- NULL
people$from <- as.character(people$from)
people <- as.data.frame(sapply(people, function(x) gsub("UNCLASSIFIEDUSDepartmentofStateCaseNoFDocNoC", "", x)))
from <- as.data.frame(sort(table(people$from), decreasing = TRUE))
from <- setDT(from, keep.rownames = T)[]
View(from)
top100 <- from[1:100,]
top100 <- top100[from != '']
View(top100)
top100 <- top100[rn != '']
selected <- people[people$from %in% top100$rn,]
recipients_sep <- setDT(tstrsplit(as.character(selected$to), ";", fixed=TRUE))[]
recipients_sep <- a[, list(V1, V2, V3, V4, V5)] ##keep the first 5 recipeints
recipients_sep <- recipients_sep[, list(V1, V2, V3, V4, V5)] ##keep the first 5 recipeints
View(recipients_sep)
mat_sel <- cbind(selected$from, recipients_sep)
View(mat_sel)
colnames(mat_sel)[1] <- "from"
View(mat_sel)
mat_sel2 <- mat_sel[ V1 != 'NA' & from != '' & nchar(V1) < 15]
View(mat_sel2)
mat_sel2 <- mat_sel[ V1 != 'NA']
View(mat_sel2)
mat_sel2 <- mat_sel[ V1 != 'NA' & nchar(V1) < 15]
View(mat_sel2)
mat_sel2 <- mat_sel[ V1 != 'NA' & nchar(V1) < 25]
View(mat_sel2)
mat_sel2 <- mat_sel[ V1 != 'NA' & nchar(V1) < 50]
View(mat_sel2)
mat_sel2 <- mat_sel[ V1 != 'NA' & nchar(V1) < 80]
View(mat_sel2)
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 80]
rm(mat_sel2)
cdata <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))
View(cdata)
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 50]
cdata <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))
View(cdata)
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 37]
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 37 & v1 != '']
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 37 & V1 != '']
cdata <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))
cdata <- ddply(mat_sel, c("from", "V1", "V2"), summarise,   N = length(from))
View(cdata)
cdata1 <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))
cdata2 <- ddply(mat_sel, c("from", "V1", "V2"), summarise,   N = length(from))
View(cdata1)
View(cdata2)
cdata2 <- ddply(mat_sel, c("from", "V2"), summarise,   N = length(from))
View(cdata2)
View(cdata1)
recipients_sep <- recipients_sep[, list(V1, V2)] ##keep the first recipeint
mat_sel <- cbind(selected$from, recipients_sep)
colnames(mat_sel)[1] <- "from"
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 37 & V1 != '']
cdata1 <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))
cdata2 <- ddply(mat_sel, c("from", "V2"), summarise,   N = length(from))
rm(cdata)
View(cdata1)
View(cdata2)
View(cdata1)
cdata3 <- ddply(mat_sel, c("from", "V1","V2"), summarise,   N = length(from))
View(cdata3)
rm(cdata3)
rbind.fill(list(cdata1, cdata2)))
rbind.fill(list(cdata1, cdata2))
pp <- cbind(names=c(rownames(cdata1), rownames(cdata2)),
rbind.fill(list(cdata1, cdata2))
)
View(pp)
recipients_sep <- recipients_sep[, list(V1)] ##keep the first recipeint
mat_sel <- cbind(selected$from, recipients_sep)
colnames(mat_sel)[1] <- "from"
mat_sel <- mat_sel[ V1 != 'NA' & nchar(V1) < 37 & V1 != '']
cdata1 <- ddply(mat_sel, c("from", "V1"), summarise,   N = length(from))
View(cdata1)
View(pp)
get.adjacency(graph.edgelist(as.matrix(cdata1), directed=T))
library(igraph)
a <- get.adjacency(graph.edgelist(as.matrix(cdata1), directed=T))
mat <- cdata1[, list(from, V1)]
View(cdata1)
mat <- cdata1[, list(from,V1)]
cdata2 <- cdata1[, list(from,V1)]
View(cdata2)
View(cdata1)
names(cdata1)
cdata2 <- cdata1[, list(V1)]
rm(cdata2)
rm(pp)
mat <- cdata1[,N:=NULL]
mat <- cdata1
View(mat)
mat$N <- NULL
View(mat)
a <- get.adjacency(graph.edgelist(as.matrix(mat), directed=T))
ig <- graph.adjacency(cdata1, mode="undirected", weighted=TRUE)
ig <- graph.adjacency(cdata1, mode="directed", weighted=TRUE)
ig <- graph.adjacency(mat, mode="directed", weighted=TRUE)
library(igraph)
n <- 71
p <- 0.5
g <- erdos.renyi.game(n, p, type = c("gnp"), directed = TRUE, loops = FALSE)
cc <- transitivity(g, type = c("global"), vids = NULL, weights = NULL, isolates = c("NaN", "zero"))
APL <- average.path.length(g, directed = TRUE)
delta <- cc/APL
p <- 0.25
g <- erdos.renyi.game(n, p, type = c("gnp"), directed = TRUE, loops = FALSE)
cc <- transitivity(g, type = c("global"), vids = NULL, weights = NULL, isolates = c("NaN", "zero"))
APL <- average.path.length(g, directed = TRUE)
delta <- (cc/0.51)/(APL/1.54)
p <- 0.5
g <- erdos.renyi.game(n, p, type = c("gnp"), directed = TRUE, loops = FALSE)
#clustering coefficient
cc <- transitivity(g, type = c("global"), vids = NULL, weights = NULL, isolates = c("NaN", "zero"))
#Average shortest path
APL <- average.path.length(g, directed = TRUE)
#small worldness measusre
delta <- (cc/0.51)/(APL/1.54)
p <- 0.75
g <- erdos.renyi.game(n, p, type = c("gnp"), directed = TRUE, loops = FALSE)
#clustering coefficient
cc <- transitivity(g, type = c("global"), vids = NULL, weights = NULL, isolates = c("NaN", "zero"))
#Average shortest path
APL <- average.path.length(g, directed = TRUE)
#small worldness measusre
delta <- (cc/0.51)/(APL/1.54)
n <- 360000000
p <- 0.25
g <- erdos.renyi.game(n, p, type = c("gnp"), directed = F, loops = FALSE)
g <- erdos.renyi.game(n, p, type = c("gnp"), directed = F, loops = FALSE)
n <- 71
p <- 1
g <- erdos.renyi.game(n, p, type = c("gnp"), directed = TRUE, loops = FALSE)
cc <- transitivity(g, type = c("global"), vids = NULL, weights = NULL, isolates = c("NaN", "zero"))
APL <- average.path.length(g, directed = TRUE)
library(igprah)
library(igpraph)
library(igraph)
edge_list = read.csv(file.choose(), sep = ",", header = T)
edge_list$X <- NULL
el=as.matrix(edge_list)
graph=graph.edgelist(el,directed=TRUE)
library(igraph)
el=as.matrix(edge_list)
graph=graph.edgelist(el,directed=TRUE)
edge_list$X <- NULL
el=as.matrix(edge_list)
graph=graph.edgelist(el,directed=TRUE)
edge_list = read.csv(file.choose(), sep = ",", header = T)
edge_list$X <- NULL
library(igraph)
el=as.matrix(edge_list)
graph=graph.edgelist(el,directed=TRUE)
degrees <- data.frame(degree = degree(graph),
in_degree = degree(graph, mode = c("in"), loops = FALSE, normalized = FALSE),
out_degree = degree(graph, mode = c("out"), loops = FALSE, normalized = FALSE),
btwn= betweenness(graph, directed = T),
close = closeness(graph, mode = c("all")),
eigen <- evcent(graph),
bon <- bonpow(graph)
)
degrees = degrees[,c(1:6, 28)]
library(gridExtra)
pdf("degree_output.pdf")
grid.table(degrees)
dev.off()
grid.table(degrees)
graph.density(graph)
fgn = edge.betweenness.community (graph, directed = TRUE, edge.betweenness = TRUE, merges = TRUE,
bridges = TRUE, modularity = TRUE, membership = TRUE)  ## run Girvan-Newman partitioning
;
plot(fgn, graph)  ## plot G-N partitioning
set.seed(12)
l <- layout.kamada.kawai(graph)
V(graph)$size <- 15*(degree(graph, mode="in")/ max(degree(graph, mode="in")))
V(graph)$label.cex <- ((betweenness(graph, directed = T)+1)/(max(betweenness(graph, directed = T))+1))*1.5
plot(graph, layout=l, edge.arrow.size=.2, edge.curved=T, edge.color="grey")
A<- plot(graph, layout=l, edge.arrow.size=.2, edge.curved=T, edge.color="grey")
plot(fgn, A)  ## plot G-N partitioning
plot(fgn, graph, layout=l, edge.arrow.size=.2, edge.curved=T, edge.color="grey")  ## plot G-N partitioning
fwt <- walktrap.community(fmg, steps=200,modularity=TRUE) # , labels=TRUE)  ## run random walk partitioning
fwt <- walktrap.community(graph, steps=200,modularity=TRUE) # , labels=TRUE)  ## run random walk partitioning
plot(fwt, fmg, layout=l, edge.arrow.size=.2, edge.curved=T, edge.color="grey")  ## plot R-W partitioning
plot(fwt, grapg, layout=l, edge.arrow.size=.2, edge.curved=T, edge.color="grey")  ## plot R-W partitioning
plot(fwt, graph, layout=l, edge.arrow.size=.2, edge.curved=T, edge.color="grey")  ## plot R-W partitioning
flp = label.propagation.community(fmg)  ## run label propogation partitioning
flp = label.propagation.community(graph)  ## run label propogation partitioning
plot(flp, graph, layout=l, edge.arrow.size=.2, edge.curved=T, edge.color="grey")  ## plot L-P partitioning
compare(fgn, fwt, method= c("nmi"))
compare(fgn, fwt, method= c("rand"))
compare(fgn, fwt, method= c("adjusted.rand"))
compare(fgn, flp, method= c("nmi"))
compare(fgn, fwt, method= c("rand"))
compare(fgn, flp, method= c("adjusted.rand"))
fgn
girvan = data.frame(fgn$membership)
rw = data.frame(fwt$membership)
flpm = data.frame(flp$membership)
fd=data.frame(name=V(fmg)$name)
fd=data.frame(name=V(graph)$name)
community-membership <- cbind(traits, girvan, rw, flpm)
community_membership <- cbind(traits, girvan, rw, flpm)
community_membership <- cbind(girvan, rw, flpm)
View(community_membership)
community_membership <- cbind(fd, girvan, rw, flpm)
View(community_membership)
View(community_membership)
View(degrees)
degress <- cbind(degrees, girvan, rw, flpm)
View(degress)
degrees <- cbind(degrees, girvan, rw, flpm)
View(degrees)
edge_list <- read.csv(file.choose(), sep = ",")
simmilarity_index <- function(x, y){
sim_index <- 1- stringdist(x, y, method = "lv")/max(nchar(as.character(x)), nchar(as.character(y)))
return(sim_index)
}
library(stringdist)
for (i in 1:nrow(edge_list)){
for (j in 1:i){
if (simmilarity_index(edge_list$a[i],edge_list$a[j]) > 0.8){
edge_list$a[i] <- edge_list$a[j]
}
}
}
library(stringdist)
for (i in 1:nrow(edge_list)){
for (j in 1:i){
if (simmilarity_index(edge_list$from[i],edge_list$from[j]) > 0.8){
edge_list$from[i] <- edge_list$from[j]
}
}
}
for (i in 1:nrow(edge_list)){
for (j in 1:i){
if (simmilarity_index(edge_list$from[i],edge_list$from[j]) > 0.8){
edge_list$from[i] <- edge_list$from[j]
}
}
}
for (i in 1:nrow(edge_list)){
for (j in 1:i){
if (simmilarity_index(edge_list$value[i],edge_list$value[j]) > 0.8){
edge_list$value[i] <- edge_list$value[j]
}
}
}
#### to do:
setwd("~/GitHub/bio security articles")
edge_list = read.csv(file.choose(), sep = ",", header = T)
View(edge_list)
edge_list$X <- NULL
Matrix2Edge <- function(x){
final <- data.frame("a"=character(),"b"=character()) #an empty dataframe to add the edge list to
for (i in 1:(ncol(x)-1)){
id = paste("V", i, sep="")
edge_list <- melt(x, id = (id))
x[id] <- NULL
keeps <- c(id, "value")
edge_list <- edge_list[keeps]
colnames(edge_list) <- colnames(final)
final <- rbind(final,edge_list)
}
final <- final[!(final$b=="" | final$b==" "),]
return(final)
}
library(reshape)
library(dplyr)
library(stringdist)
### 1. Functions ----
graph=graph.edgelist(as.matrix(edge_list),directed=FALSE)
library(igraph)
graph=graph.edgelist(as.matrix(edge_list),directed=FALSE)
graph.density(graph)
degrees <- data.frame(degree = degree(graph),
in_degree = degree(graph, mode = c("in"), loops = FALSE, normalized = FALSE),
out_degree = degree(graph, mode = c("out"), loops = FALSE, normalized = FALSE),
btwn= betweenness(graph, directed = T),
close = closeness(graph, mode = c("all")),
eigen <- evcent(graph),
bon <- bonpow(graph)
)
degrees = degrees[,c(1:6, 28)]
#include this in markdown
degrees_sorted <- degrees[order(-degrees$in_degree),]
degrees <- data.frame(degree = degree(graph),
in_degree = degree(graph, mode = c("in"), loops = FALSE, normalized = FALSE),
out_degree = degree(graph, mode = c("out"), loops = FALSE, normalized = FALSE),
btwn= betweenness(graph, directed = T),
close = closeness(graph, mode = c("all")),
eigen <- evcent(graph),
bon <- bonpow(graph)
)
edge_list = read.csv(file.choose(), sep = ",", header = T)
edge_list$X <- NULL
library(igraph)
graph=graph.edgelist(as.matrix(edge_list),directed=FALSE)
graph.density(graph)
degrees <- data.frame(degree = degree(graph),
in_degree = degree(graph, mode = c("in"), loops = FALSE, normalized = FALSE),
out_degree = degree(graph, mode = c("out"), loops = FALSE, normalized = FALSE),
btwn= betweenness(graph, directed = T),
close = closeness(graph, mode = c("all")),
eigen <- evcent(graph),
bon <- bonpow(graph)
)
degrees <- data.frame(degree = degree(graph),
in_degree = degree(graph, mode = c("in"), loops = FALSE, normalized = FALSE),
out_degree = degree(graph, mode = c("out"), loops = FALSE, normalized = FALSE),
btwn= betweenness(graph, directed = T),
close = closeness(graph, mode = c("all")),
eigen <- evcent(graph),
#bon <- bonpow(graph)
)
rm(eigen)
degrees <- data.frame(degree = degree(graph),
in_degree = degree(graph, mode = c("in"), loops = FALSE, normalized = FALSE),
out_degree = degree(graph, mode = c("out"), loops = FALSE, normalized = FALSE),
btwn= betweenness(graph, directed = T),
close = closeness(graph, mode = c("all")),
eigen <- evcent(graph),
#bon <- bonpow(graph)
)
rm(degrees)
degree = degree(graph)
in_degree = degree(graph, mode = c("in"), loops = FALSE, normalized = FALSE)
out_degree = degree(graph, mode = c("out"), loops = FALSE, normalized = FALSE)
btwn= betweenness(graph, directed = T)
close = closeness(graph, mode = c("all"))
eigen <- evcent(graph)
bon <- bonpow(graph)
degrees <- data.frame(degree,in_degree,out_degree,btwn,close,eigen)
View(degrees)
degrees = degrees[,c(1:6, 28)]
degrees = degrees[,c(1:5)]
View(degrees)
degrees <- data.frame(degree,in_degree,out_degree,btwn,close,eigen)
degrees = degrees[,c(1:6)]
View(degrees)
degrees_sorted <- degrees[order(-degrees$degree),]
View(degrees_sorted)
write.csv(edge_list, file = "degrees_sorted.csv")
write.csv(edge_list, file = "degrees_sorted.csv")
write.csv(degrees_sorted, file = "degrees_sorted.csv")
View(degrees_sorted)
library(gridExtra)
pdf("degrees_sorted.pdf", height=15, width=15)
grid.table(degrees)
dev.off()
library(gridExtra)
pdf("degrees_sorted.pdf", height=15, width=15)
grid.table(degrees_sorted)
dev.off()
cor(degrees_sorted)
cor <- cor(degrees_sorted)
in_degree = degree(graph, mode = c("in"), loops = FALSE, normalized = FALSE)
out_degree = degree(graph, mode = c("out"), loops = FALSE, normalized = FALSE)
total_degree = degree(graph)
btwn= betweenness(graph, directed = T)
summary(lm(total_degree ~ btwn))
set.seed(12)
